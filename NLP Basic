Python NLP

REgex
pattern	matches	example
\w+	word	'Magic'
\d	digit	9
\s	space	' '
.*	wildcard	'username74'
+ or *	greedy match	'aaaaaa'
\S	not space	'no_spaces'
[a-z]	lowercase group	'abcdefg'

Regex ranges and groups
pattern	matches	example
[A-Za-z]+	upper and lowercase English alphabet	'ABCDEFghijk'
[0-9]	numbers from 0 to 9	9
[A-Za-z\-\.]+	upper and lowercase English alphabet, - and .	'My-Website.com'
(a-z)	a, - and z	'a-z'
(\s+l,)	spaces or a comma	', '

#----------------------------------------------------------------------------------------------------------------------------------

# Import the regex module
import re

# Write a pattern to match sentence endings: sentence_endings
sentence_endings = r"[.?!]"

# Split my_string on sentence endings and print the result
print(re.split(sentence_endings, my_string))

# Find all capitalized words in my_string and print the result
capitalized_words = r"[A-Z]\w+"
print(re.findall(capitalized_words, my_string))

# Split my_string on spaces and print the result
spaces = r"\s+"
print(re.split(spaces, my_string))

# Find all digits in my_string and print the result
digits = r"\d+"

In [1]: import re

In [2]: re.match('abc', 'abcde')
Out[2]: <_sre.SRE_Match object; span=(0, 3), match='abc'>

In [3]: re.search('abc', 'abcde')
Out[3]: <_sre.SRE_Match object; span=(0, 3), match='abc'>

In [4]: re.match('cd', 'abcde')

In [5]: re.search('cd', 'abcde')
Out[5]: <_sre.SRE_Match object; span=(2, 4), match='cd'>

# Search for the first occurrence of "coconuts" in scene_one: match
match = re.search("coconuts", scene_one)

# Print the start and end indexes of match
print(match.start(), match.end())

# Write a regular expression to search for anything in square brackets: pattern1
pattern1 = r"\[.*\]"

# Use re.search to find the first text in square brackets
print(re.search(pattern1, scene_one))

# Find the script notation at the beginning of the fourth sentence and print it
pattern2 = r"[\w\s]+:"
print(re.match(pattern2, sentences[3]))

Regex groups using or "|"
OR is represented using |
You can define a group using ()
You can define explicit character ranges using []
 In [1]: import re 

In [2]: match_digits_and_words = ('(\d+|\w+)')
In [3]: re.findall(match_digits_and_words, 'He has 11 cats.')
Out[3]: ['He', 'has', '11', 'cats']

#----------------------------------------------------------------------------------------------------------------------------------

Tokenization
Turning a string or document into tokens (smaller chunks)
In [1]: from nltk.tokenize import word_tokenize

In [2]: word_tokenize("Hi there!") 
Out[2]: ['Hi', 'there', '!']

Why tokenize?
Easier to map part of speech
Matching common words
Removing unwanted tokens

Other nltk tokenizers
sent_tokenize: tokenize a document into sentences
regexp_tokenize: tokenize a string or document based on a regular expression pattern
TweetTokenizer: special class just for tweet tokenization, allowing you to separate hashtags, mentions and lots of exclamation points!!!


# Import necessary modules
from nltk.tokenize import sent_tokenize
from nltk.tokenize import word_tokenize

# Split scene_one into sentences: sentences
sentences = sent_tokenize(scene_one)

# Use word_tokenize to tokenize the fourth sentence: tokenized_sent
tokenized_sent = word_tokenize(sentences[3])

# Make a set of unique tokens in the entire scene: unique_tokens
unique_tokens = set(word_tokenize(scene_one))

# Print the unique tokens result
print(unique_tokens)

#----------------------------------------------------------------------------------------------------------------------------------

Twitter is a frequently used source for NLP text and tasks. In this exercise, you'll build a more complex tokenizer for tweets with hashtags and mentions using nltk and regex. The nltk.tokenize.TweetTokenizer class gives you some extra methods and attributes for parsing tweets.

Here, you're given some example tweets to parse using both TweetTokenizer and regexp_tokenize from the nltk.tokenize module. These example tweets have been pre-loaded into the variable tweets. Feel free to explore it in the IPython Shell!

# Import the necessary modules
from nltk.tokenize import regexp_tokenize
from nltk.tokenize import TweetTokenizer

# Define a regex pattern to find hashtags: pattern1
pattern1 = r"#\w+"

# Use the pattern on the first tweet in the tweets list
regexp_tokenize(tweets[0], pattern1)

# Write a pattern that matches both mentions and hashtags
pattern2 = r"([@#]\w+)"

# Use the pattern on the last tweet in the tweets list
regexp_tokenize(tweets[-1], pattern2)

# Use the TweetTokenizer to tokenize all tweets into one list
tknzr = TweetTokenizer()
all_tokens = [tknzr.tokenize(t) for t in tweets]
print(all_tokens)

# Tokenize and print all words in german_text
all_words = word_tokenize(german_text)
print(all_words)

# Tokenize and print only capital words
capital_words = r"[A-ZÃœ]\w+"
print(regexp_tokenize(german_text, capital_words))

# Tokenize and print only emoji
emoji = "['\U0001F300-\U0001F5FF'|'\U0001F600-\U0001F64F'|'\U0001F680-\U0001F6FF'|'\u2600-\u26FF\u2700-\u27BF']"
print(regexp_tokenize(german_text, emoji))


Combining NLP data extraction with plotting
In [1]: from matplotlib import pyplot as plt

In [2]: from nltk.tokenize import word_tokenize
In [3]: words = word_tokenize("This is a pretty cool tool!")
In [4]: word_lengths = [len(w) for w in words]
In [5]: plt.hist(word_lengths)
Out[5]: (array([ 2.,  0.,  1.,  0.,  0.,  0.,  3.,  0.,  0.,  1.]),
        array([ 1. ,  1.5,  2. ,  2.5,  3. ,  3.5,  4. ,  4.5,  5. ,  5.5,
                                                                    6. ]),
        <a list of 10 Patch objects>)
		
		plt.show()

#----------------------------------------------------------------------------------------------------------------------------------
		
		Charting practice
Try using your new skills to find and chart the number of words per line in the script using matplotlib. The Holy Grail script is loaded for you, and you need to use regex to find the words per line.

Using list comprehensions here will speed up your computations. For example: my_lines = [tokenize(l) for l in lines] will call a function tokenize on each line in the list lines. The new transformed list will be saved in the my_lines variable.

You have access to the entire script in the variable holy_grail. Go for it!

# Split the script into lines: lines
lines = holy_grail.split('\n')

# Replace all script lines for speaker
pattern = "[A-Z]{2,}(\s)?(#\d)?([A-Z]{2,})?:"
lines = [re.sub(pattern, '', l) for l in lines]

# Tokenize each line: tokenized_lines
tokenized_lines = [regexp_tokenize(s, "\w+") for s in lines]

# Make a frequency list of lengths: line_num_words
line_num_words = [len(t_line) for t_line in tokenized_lines]

# Plot a histogram of the line lengths
plt.hist(line_num_words)

# Show the plot
plt.show()

#----------------------------------------------------------------------------------------------------------------------------------

Word counts with bag-of-words
Basic method for finding topics in a text
Need to first create tokens using tokenization
... and then count up all the tokens
The more frequent a word, the more important it might be
Can be a great way to determine the significant words in a text

Bag-of-words example
Text: "The cat is in the box. The cat likes the box. The box is over the cat."

Bag of words (stripped punctuation):

"The": 3, "box": 3
"cat": 3, "the": 3
"is": 2
"in": 1, "likes": 1, "over": 1

In [1]: from nltk.tokenize import word_tokenize
In [2]: from collections import Counter
In [3]: Counter(word_tokenize(
                """The cat is in the box. The cat likes the box. 
                 The box is over the cat."""))
Out[3]: 
Counter({'.': 3,
         'The': 3,
         'box': 3,
         'cat': 3,
         'in': 1,
         ...
         'the': 3})
In [4]: counter.most_common(2)
Out[4]: [('The', 3), ('box', 3)]


# Import Counter
from collections import Counter

# Tokenize the article: tokens
tokens = word_tokenize(article)

# Convert the tokens into lowercase: lower_tokens
lower_tokens = [t.lower() for t in tokens]

# Create a Counter with the lowercase tokens: bow_simple
bow_simple = Counter(lower_tokens)

# Print the 10 most common tokens
print(bow_simple.most_common(10))

#----------------------------------------------------------------------------------------------------------------------------------

Simple text preprocessing
Why preprocess?
Helps make for better input data
When performing machine learning or other statistical methods
Examples:
Tokenization to create a bag of words
Lowercasing words
Lemmatization/Stemming
Shorten words to their root stems
Removing stop words, punctuation, or unwanted tokens
Good to experiment with different approaches

In [1]: from ntlk.corpus import stopwords

In [2]: text = """The cat is in the box. The cat likes the box. 
                  The box is over the cat."""
In [3]: tokens = [w for w in word_tokenize(text.lower()) 
                  if w.isalpha()]
In [4]: no_stops = [t for t in tokens 
                    if t not in stopwords.words('english')]
In [5]: Counter(no_stops).most_common(2)
Out[5]: [('cat', 3), ('box', 3)]

# Import WordNetLemmatizer
from nltk.stem import WordNetLemmatizer

# Retain alphabetic words: alpha_only
alpha_only = [t for t in lower_tokens if t.isalpha()]

# Remove all stop words: no_stops
no_stops = [t for t in alpha_only if t not in english_stops]

# Instantiate the WordNetLemmatizer
wordnet_lemmatizer = WordNetLemmatizer()

# Lemmatize all tokens into a new list: lemmatized
lemmatized = [wordnet_lemmatizer.lemmatize(t) for t in no_stops]

# Create the bag-of-words: bow
bow = Counter(lemmatized)

# Print the 10 most common tokens
print(bow.most_common(10))

#----------------------------------------------------------------------------------------------------------------------------------

Introduction to gensim


In [1]: from gensim.corpora.dictionary import Dictionary
In [2]: from nltk.tokenize import word_tokenize
In [3]: my_documents = ['The movie was about a spaceship and aliens.',
   ...:                 'I really liked the movie!',
   ...:                 'Awesome action scenes, but boring characters.',
   ...:                 'The movie was awful! I hate alien films.',
   ...:                 'Space is cool! I liked the movie.',
   ...:                 'More space films, please!',]
In [4]: tokenized_docs = [word_tokenize(doc.lower()) 
   ...:                   for doc in my_documents]
In [5]: dictionary = Dictionary(tokenized_docs)
In [6]: dictionary.token2id
Out[6]: 
{'!': 11,
 ',': 17,
 '.': 7,
 'a': 2,
 'about': 4,
...
}
Creating a gensim dictionaryIn [1]: from gensim.corpora.dictionary import Dictionary In [2]: from nltk.tokenize import word_tokenize In [3]: my_documents = ['The movie was about a spaceship and aliens.', ...: 'I really liked the movie!', ...: 'Awesome action scenes, but boring characters.', ...: 'The movie was awful! I hate alien films.', ...: 'Space is cool! I liked the movie.', ...: 'More space films, please!',] In [4]: tokenized_docs = [word_tokenize(doc.lower()) ...: for doc in my_documents] In [5]: dictionary = Dictionary(tokenized_docs) In [6]: dictionary.token2id Out[6]: {'!': 11, ',': 17, '.': 7, 'a': 2, 'about': 4, ... }
Play
Mute

In [7]: corpus = [dictionary.doc2bow(doc) for doc in tokenized_docs]
In [8]: corpus
Out[8]: 
[[(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1)],
 [(0, 1), (1, 1), (9, 1), (10, 1), (11, 1), (12, 1)],
...
]

You'll use these data structures to investigate word trends and potential interesting topics in your document set. To get started, we have imported a few additional messy articles from Wikipedia, which were preprocessed by lowercasing all words, tokenizing them, and removing stop words and punctuation. These were then stored in a list of document tokens called articles. You'll need to do some light preprocessing and then generate the gensim dictionary and corpus.

# Import Dictionary
from gensim.corpora.dictionary import Dictionary

# Create a Dictionary from the articles: dictionary
dictionary = Dictionary(articles)

# Select the id for "computer": computer_id
computer_id = dictionary.token2id.get("computer")

# Use computer_id with the dictionary to print the word
print(dictionary.get(computer_id))

# Create a MmCorpus: corpus
corpus = [dictionary.doc2bow(article) for article in articles]

# Print the first 10 word ids with their frequency counts from the fifth document
print(corpus[4][:10])

#----------------------------------------------------------------------------------------------------------------------------------

Gensim bag-of-words
Now, you'll use your new gensim corpus and dictionary to see the most common terms per document and across all documents. You can use your dictionary to look up the terms. Take a guess at what the topics are and feel free to explore more documents in the IPython Shell!

You have access to the dictionary and corpus objects you created in the previous exercise, as well as the Python defaultdict and itertools to help with the creation of intermediate data structures for analysis.

The fifth document from corpus is stored in the variable doc, which has been sorted in descending order.

# Save the fifth document: doc
doc = corpus[4]

# Sort the doc for frequency: bow_doc
bow_doc = sorted(doc, key=lambda w: w[1], reverse=True)

# Print the top 5 words of the document alongside the count
for word_id, word_count in bow_doc[:5]:
    print(dictionary.get(word_id), word_count)
    
# Create the defaultdict: total_word_count
total_word_count = defaultdict(int)
for word_id, word_count in itertools.chain.from_iterable(corpus):
    total_word_count[word_id] += word_count

# Create a sorted list from the defaultdict: sorted_word_count 
sorted_word_count = sorted(total_word_count.items(), key=lambda w: w[1], reverse=True) 

# Print the top 5 words across all documents alongside the count
for word_id, word_count in sorted_word_count[:5]:
    print(dictionary.get(word_id), word_count)

#----------------------------------------------------------------------------------------------------------------------------------
	
Tf-idf with gensim
What is tf-idf?
Term frequency - inverse document frequency
Allows you to determine the most important words in each document
Each corpus may have shared words beyond just stopwords
These words should be down-weighted in importance
Example from astronomy: "Sky"
Ensures most common words don't show up as key words
Keeps document specific frequent words weighted high

Tf-idf with gensim
In [10]: from gensim.models.tfidfmodel import TfidfModel
In [11]: tfidf = TfidfModel(corpus)
In [12]: tfidf[corpus[1]]
Out[12]: 
[(0, 0.1746298276735174),
 (1, 0.1746298276735174),
 (9, 0.29853166221463673),
 (10, 0.7716931521027908),
...
]

# Import TfidfModel
from gensim.models.tfidfmodel import TfidfModel

# Create a new TfidfModel using the corpus: tfidf
tfidf = TfidfModel(corpus)

# Calculate the tfidf weights of doc: tfidf_weights
tfidf_weights = tfidf[doc]

# Print the first five weights
print(tfidf_weights[:5])

# Sort the weights from highest to lowest: sorted_tfidf_weights
sorted_tfidf_weights = sorted(tfidf_weights, key=lambda w: w[1], reverse=True)

# Print the top 5 weighted words
for term_id, weight in sorted_tfidf_weights[:5]:
    print(dictionary.get(term_id), weight)
	

#----------------------------------------------------------------------------------------------------------------------------------
Named Entity Recognition (NER)
NLP task to identify important named entities in the text
People, places, organizations
Dates, states, works of art
... and other categories!

Using nltk for Named Entity Recognition
In [1]: import nltk

In [2]: sentence = '''In New York, I like to ride the Metro to visit MOMA 
                      and some restaurants rated well by Ruth Reichl.'''

In [3]: tokenized_sent = nltk.word_tokenize(sentence)
In [4]: tagged_sent = nltk.pos_tag(tokenized_sent)
In [5]: tagged_sent[:3]
Out[5]: [('In', 'IN'), ('New', 'NNP'), ('York', 'NNP')]
In [6]: print(nltk.ne_chunk(tagged_sent))
(S
  In/IN
  (GPE New/NNP York/NNP)
  ,/,
  I/PRP
  like/VBP
  to/TO
  ride/VB
  the/DT
  (ORGANIZATION Metro/NNP)
  to/TO
  visit/VB
  (ORGANIZATION MOMA/NNP)
  and/CC
  some/DT
  restaurants/NNS
  rated/VBN
  well/RB
  by/IN
  (PERSON Ruth/NNP Reichl/NNP)
  ./.)
  
  # Tokenize the article into sentences: sentences
sentences = nltk.sent_tokenize(article)

# Tokenize each sentence into words: token_sentences
token_sentences = [nltk.word_tokenize(sent) for sent in sentences]

# Tag each tokenized sentence into parts of speech: pos_sentences
pos_sentences = [nltk.pos_tag(sent) for sent in token_sentences] 

# Create the named entity chunks: chunked_sentences
chunked_sentences = nltk.ne_chunk_sents(pos_sentences, binary=True)

# Test for stems of the tree with 'NE' tags
for sent in chunked_sentences:
    for chunk in sent:
        if hasattr(chunk, "label") and chunk.label() == "NE":
            print(chunk)

# Create the defaultdict: ner_categories
ner_categories = defaultdict(int)

# Create the nested for loop
for sent in chunked_sentences:
    for chunk in sent:
        if hasattr(chunk, 'label'):
            ner_categories[chunk.label()] += 1
            
# Create a list from the dictionary keys for the chart labels: labels
labels = list(ner_categories.keys())

# Create a list of the values: values
values = [ner_categories.get(l) for l in labels]

# Create the pie chart
plt.pie(values, labels=labels, autopct='%1.1f%%', startangle=140)

# Display the chart
plt.show()

#----------------------------------------------------------------------------------------------------------------------------------

What is SpaCy?
NLP library similar to gensim, with different implementations
Focus on creating NLP pipelines to generate models and corpora

In [1]: import spacy
In [2]: nlp = spacy.load('en')
In [3]: nlp.entity
Out[3]: <spacy.pipeline.EntityRecognizer at 0x7f76b75e68b8>
In [4]: doc = nlp("""Berlin is the capital of Germany; 
                  and the residence of Chancellor Angela Merkel.""")
In [5]: doc.ents
Out[5]: (Berlin, Germany, Angela Merkel)
In [6]: print(doc.ents[0], doc.ents[0].label_)
Berlin GPE

Why use SpaCy for NER?
Easy pipeline creation
Different entity types compared to nltk
Informal language corpora
Easily find entities in Tweets and chat messages


# Import spacy
import spacy

# Instantiate the English model: nlp
nlp = spacy.load('en', tagger=False, parser=False, matcher=False)

# Create a new document: doc
doc = nlp(article)

# Print all of the found entities and their labels
for ent in doc.ents:
    print(ent.label_, ent.text)

#----------------------------------------------------------------------------------------------------------------------------------

Multilingual NER with polyglot

What is polyglot?
NLP library which uses word vectors
Why polyglot?
Vectors for many different languages
More than 130!

In [1]: from polyglot.text import Text

In [2]: áº—ext = """El presidente de la Generalitat de CataluÃ±a,
                  Carles Puigdemont, ha afirmado hoy a la alcaldesa 
                  de Madrid, Manuela Carmena, que en su etapa de 
                  alcalde de Girona (de julio de 2011 a enero de 2016) 
                  hizo una gran promociÃ³n de Madrid."""

In [3]: ptext = Text(text)
In [4]: ptext.entities
Out[4]: 
[I-ORG(['Generalitat', 'de']),
 I-LOC(['Generalitat', 'de', 'CataluÃ±a']),
 I-PER(['Carles', 'Puigdemont']),
 I-LOC(['Madrid']),
 I-PER(['Manuela', 'Carmena']),
 I-LOC(['Girona']),
 I-LOC(['Madrid'])]
 
 
 # Create a new text object using Polyglot's Text class: txt
txt = Text(article)

In [1]: article
Out[1]: "\ufeffÃ©dition abonnÃ©\r\n\r\n\r\nDans une tribune au Â« Monde Â», lâ€™universitaire Charles Cuvelliez estime que le fantasme dâ€™un remplacement de lâ€™homme par lâ€™algorithme et le robot repose sur un malentendu.\r\n\r\n\r\nLe Monde | 10.05.2017 Ã  06h44 â€¢ Mis Ã  jour le 10.05.2017 Ã  09h47 | Par Charles Cuvelliez (Professeur Ã  lâ€™Ecole polytechnique de l'universitÃ© libre de Bruxelles)\r\n\r\n\r\nTRIBUNE. Lâ€™usage morbide, par certains, de Facebook Live a amenÃ© son fondateur Ã  annoncer prÃ©cipitamment le recrutement de 3 000 modÃ©rateurs supplÃ©mentaires. Il est vrai que lâ€™intelligence artificielle (IA) est bien en peine de reconnaÃ®tre des contenus violents, surtout diffusÃ©s en direct.\r\n\r\n\r\nLe quotidien affreux de ces modÃ©rateurs, contraints de visionner des horreurs Ã  longueur de journÃ©e, mÃ©riterait pourtant quâ€™on les remplace vite par des machines !\r\n\r\n\r\nLâ€™IA ne peut pas tout, mais lÃ  oÃ¹ elle peut beaucoup, on la maudit, accusÃ©e de dÃ©truire nos emplois, de remplacer la convivialitÃ© humaine. Ce dÃ©bat repose sur un malentendu.\r\n\r\n\r\nIl vient dâ€™une dÃ©finition de lâ€™IA qui nâ€™a, dans la rÃ©alitÃ©, jamais pu Ãªtre mise en pratique : en 1955, elle Ã©tait vue comme la crÃ©ation de programmes informatiques qui, quoi quâ€™on leur confie, le feraient un jour mieux que les humains. On pensait que toute caractÃ©ristique de lâ€™intelligence humaine pourrait un jour Ãªtre si prÃ©cisÃ©ment dÃ©crite quâ€™il suffirait dâ€™une machine pour la simuler. Ce nâ€™est pas vrai.\r\n\r\n\r\nAngoisses infondÃ©es\r\n\r\n\r\nComme le dit un rÃ©cent Livre blanc sur la question (Pourquoi il ne faut pas avoir peur de lâ€™Intelligence arti\xadficielle, Julien Maldonato, Deloitte, mars 2017), rien ne pourra remplacer un humain dans sa globalitÃ©.\r\n\r\n\r\nLâ€™IA, câ€™est de lâ€™apprentissage automatique dotÃ© dâ€™un processus dâ€™ajustement de modÃ¨les statistiques Ã  des masses de donnÃ©es, explique lâ€™auteur. Il sâ€™agit dâ€™un apprentissage sur des paramÃ¨tres pour lesquels une vision humaine nâ€™explique pas pourquoi ils marchent si bien dans un contexte donnÃ©.\r\n\r\n\r\nCâ€™est aussi ce que dit le rapport de lâ€™Office parlementaire dâ€™Ã©valuation des choix scientifiques et technologiques (Â« Pour une intelligence artificielle maÃ®trisÃ©e, utile et dÃ©mystifiÃ©e Â», 29 mars 2017), pour qui ce cÃ´tÃ© Â« boÃ®te noire Â» explique des angoisses infondÃ©es. Ethiquement, se fonder sur lâ€™IA pour des tÃ¢ches critiques sans bien comprendre le comment..."

# Print each of the entities found
for ent in txt.entities:
    print(ent)
    
# Print the type of ent
print(type(ent))

# Create the list of tuples: entities
entities = [(ent.tag, ' '.join(ent)) for ent in txt.entities]

# Print entities
print(entities)

# Initialize the count variable: count
count = 0

# Iterate over all the entities
for ent in txt.entities:
    # Check whether the entity contains 'MÃ¡rquez' or 'Gabo'
    if "MÃ¡rquez" in ent or "Gabo" in ent:
        # Increment count
        count += 1

# Print count
print(count)

# Calculate the percentage of entities that refer to "Gabo": percentage
percentage = count / len(txt.entities)
print(percentage)



#----------------------------------------------------------------------------------------------------------------------------------


Building word count vectors with scikit-learn

Count Vectorizer with Python
In [1]: import pandas as pd

In [2]: from sklearn.model_selection import train_test_split

In [3}: from sklearn.feature_extraction.text import CountVectorizer
In [4]: df = ... # Load data into DataFrame
In [5]: y = df['Sci-Fi']
In [6]: X_train, X_test, y_train, y_test = train_test_split(
                                             df['plot'], y, 
                                             test_size=0.33, 
                                             random_state=53)
In [7]: count_vectorizer = CountVectorizer(stop_words='english')
In [8]: count_train = count_vectorizer.fit_transform(X_train.values)
In [9]: count_test = count_vectorizer.transform(X_test.values)

In  [10]: from sklearn.naive_bayes import MultinomialNB
In  [11]: from sklearn import metrics
In  [12]: nb_classifier = MultinomialNB()

In  [13]: nb_classifier.fit(count_train, y_train)
In  [14]: pred = nb_classifier.predict(count_test)
In  [15]: metrics.accuracy_score(y_test, pred)
Out [15]: 0.85841849389820424

In  [16]: metrics.confusion_matrix(y_test, pred, labels=[0,1])
Out [16]: 
array([[6410,  563],
       [ 864, 2242]])


# Import the necessary modules
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split

# Print the head of df
print(df.head())

# Create a series to store the labels: y
y = df.label

# Create training and test sets
X_train, X_test, y_train, y_test = train_test_split(df['text'], y, test_size=0.33, random_state=53)

# Initialize a CountVectorizer object: count_vectorizer
count_vectorizer = CountVectorizer(stop_words='english')

# Transform the training data using only the 'text' column values: count_train 
count_train = count_vectorizer.fit_transform(X_train)

# Transform the test data using only the 'text' column values: count_test 
count_test = count_vectorizer.transform(X_test)

# Print the first 10 features of the count_vectorizer
print(count_vectorizer.get_feature_names()[:10])

TfidfVectorizer for text classification
Similar to the sparse CountVectorizer created in the previous exercise, you'll work on creating tf-idf vectors for your documents. You'll set up a TfidfVectorizer and investigate some of its features.

In this exercise, you'll use pandas and sklearn along with the same X_train, y_train and X_test, y_test DataFrames and Series you created in the last exercise.

# Import TfidfVectorizer
from sklearn.feature_extraction.text import TfidfVectorizer

# Initialize a TfidfVectorizer object: tfidf_vectorizer
tfidf_vectorizer = TfidfVectorizer(stop_words='english', max_df=0.7)

# Transform the training data: tfidf_train 
tfidf_train = tfidf_vectorizer.fit_transform(X_train)

# Transform the test data: tfidf_test 
tfidf_test = tfidf_vectorizer.transform(X_test)

# Print the first 10 features
print(tfidf_vectorizer.get_feature_names()[:10])

# Print the first 5 vectors of the tfidf training data
print(tfidf_train.A[:5])

Inspecting the vectors
To get a better idea of how the vectors work, you'll investigate them by converting them into pandas DataFrames.

Here, you'll use the same data structures you created in the previous two exercises (count_train, count_vectorizer, tfidf_train, tfidf_vectorizer) as well as pandas, which is imported as pd.

# Create the CountVectorizer DataFrame: count_df
count_df = pd.DataFrame(count_train.A, columns=count_vectorizer.get_feature_names())

# Create the TfidfVectorizer DataFrame: tfidf_df
tfidf_df = pd.DataFrame(tfidf_train.A, columns=tfidf_vectorizer.get_feature_names())

# Print the head of count_df
print(count_df.head())

# Print the head of tfidf_df
print(tfidf_df.head())

# Calculate the difference in columns: difference
difference = set(count_df.columns) - set(tfidf_df.columns)
print(difference)

# Check whether the DataFrames are equal
print(count_df.equals(tfidf_df))

Training and testing the "fake news" model with CountVectorizer
Now it's your turn to train the "fake news" model using the features you identified and extracted. In this first exercise you'll train and test a Naive Bayes model using the CountVectorizer data.

The training and test sets have been created, and count_vectorizer, count_train, and count_test have been computed.

# Import the necessary modules
from sklearn.naive_bayes import MultinomialNB
from sklearn import metrics

# Instantiate a Multinomial Naive Bayes classifier: nb_classifier
nb_classifier = MultinomialNB()

# Fit the classifier to the training data
nb_classifier.fit(count_train, y_train)

# Create the predicted tags: pred
pred = nb_classifier.predict(count_test)

# Calculate the accuracy score: score
score = metrics.accuracy_score(y_test, pred)
print(score)

# Calculate the confusion matrix: cm
cm = metrics.confusion_matrix(y_test, pred, labels=['FAKE', 'REAL'])
print(cm)


Training and testing the "fake news" model with TfidfVectorizer
Now that you have evaluated the model using the CountVectorizer, you'll do the same using the TfidfVectorizer with a Naive Bayes model.

The training and test sets have been created, and tfidf_vectorizer, tfidf_train, and tfidf_test have been computed. Additionally, MultinomialNB and metrics have been imported from, respectively, sklearn.naive_bayes and sklearn.

# Create a Multinomial Naive Bayes classifier: nb_classifier
nb_classifier = MultinomialNB()

# Fit the classifier to the training data
nb_classifier.fit(tfidf_train, y_train)

# Create the predicted tags: pred
pred = nb_classifier.predict(tfidf_test)

# Calculate the accuracy score: score
score = metrics.accuracy_score(y_test, pred)
print(score)

# Calculate the confusion matrix: cm
cm = metrics.confusion_matrix(y_test, pred, labels=['FAKE', 'REAL'])
print(cm)

Improving your model
Your job in this exercise is to test a few different alpha levels using the Tfidf vectors to determine if there is a better performing combination.

The training and test sets have been created, and tfidf_vectorizer, tfidf_train, and tfidf_test have been computed.

# Create the list of alphas: alphas
alphas = np.arange(0, 1, .1)

# Define train_and_predict()
def train_and_predict(alpha):
    # Instantiate the classifier: nb_classifier
    nb_classifier = MultinomialNB(alpha=alpha)
    # Fit to the training data
    nb_classifier.fit(tfidf_train, y_train)
    # Predict the labels: pred
    pred = nb_classifier.predict(tfidf_test)
    # Compute accuracy: score
    score = metrics.accuracy_score(y_test, pred)
    return score

# Iterate over the alphas and print the corresponding score
for alpha in alphas:
    print('Alpha: ', alpha)
    print('Score: ', train_and_predict(alpha))
    print()
   
 
 Inspecting your model
Now that you have built a "fake news" classifier, you'll investigate what it has learned. You can map the important vector weights back to actual words using some simple inspection techniques.

You have your well performing tfidf Naive Bayes classifier available as nb_classifier, and the vectors as tfidf_vectorizer.

# Get the class labels: class_labels
class_labels = nb_classifier.classes_

# Extract the features: feature_names
feature_names = tfidf_vectorizer.get_feature_names()

# Zip the feature names together with the coefficient array and sort by weights: feat_with_weights
feat_with_weights = sorted(zip(nb_classifier.coef_[0], feature_names))

# Print the first class label and the top 20 feat_with_weights entries
print(class_labels[0], feat_with_weights[:20])

# Print the second class label and the bottom 20 feat_with_weights entries
print(class_labels[1], feat_with_weights[-20:])
